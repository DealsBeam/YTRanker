<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html>
<html b:version='2' class='v2' expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
  <!-- Required Blogger head content -->
  <b:include data='blog' name='all-head-content' />
  
  <!-- SEO Meta Tags -->
  <title id="page-title"><data:blog.pageTitle/> | YTRanker</title>
  <b:if cond='data:blog.metaDescription'>
    <meta expr:content='data:blog.metaDescription' name='description' id="meta-description"/>
  <b:else/>
    <meta content='Explore the latest videos from this YouTube channel in an elegant gallery format.' name='description' id="meta-description"/>
  </b:if>

  <meta content='youtube, videos, gallery, channel, blogger' name='keywords' id="meta-keywords"/>

  <!-- Open Graph Tags -->
  <meta expr:content='data:blog.pageTitle + " | YTRanker"' property='og:title' id="og-title"/>
  <b:if cond='data:blog.metaDescription'>
    <meta expr:content='data:blog.metaDescription' property='og:description' id="og-description"/>
  <b:else/>
    <meta content='Explore the latest videos from this YouTube channel in an elegant gallery format.' property='og:description' id="og-description"/>
  </b:if>

  <b:if cond='data:blog.postImageUrl'>
  <meta expr:content='data:blog.postImageUrl' property='og:image' id="og-image"/>
<b:else/>
  <meta content='https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjXYsDSSHLQVWexxzduVmnL2xovqqD4Qs2Vm1ssgAX50l9nCGd33PTj-ZTS8ljAVql9kshAp_0P6u1-fbJa2O4QgM-ydyfAdxO2SAGfhKPFucmoNORlJYPsYWVWwEEby2RrGY-Tfc1YtYyoNDp8Oa9FtAQHonq1WRn0HjVJyjuciLgacY4qw0J8OJ19_1w/s1600/InShot_20240624_224125600.png' property='og:image' id="og-image"/>
</b:if>

<link rel="canonical" id="canonical-link" expr:href="data:blog.url"/>
  <script type="application/ld+json" id="channel-structured-data">  
    {
    "@context": "https://schema.org",
    "@type": "WebSite",
    "name": "YTRanker",
    "author": "saheermk",
    "author-url": "https://saheermk.blogspot.com/",
    "template-repo": "https://github.com/saheermk/YTRanker",
    "version": "1.2",
    }
  </script>


  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" />
  <style>
    :root {
      --primary-bg: #121212;
      --card-bg: #1f1f1f;
      --text-primary: #fff;
      --text-secondary: #aaa;
      --accent: #ff0000;
      --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      --transition: all 0.3s ease;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Roboto', Arial, sans-serif;
      background-color: var(--primary-bg);
      color: var(--text-primary);
      line-height: 1.6;
      padding: 0;
      margin: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    header {
      padding: 1.5rem 1rem;
      background-color: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(10px);
      position: sticky;
      top: 0;
      z-index: 100;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
    }

    .channel-info {
      display: flex;
      align-items: center;
      gap: 1rem;
      max-width: 1200px;
      width: 100%;
    }

    .channel-logo {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid var(--accent);
    }

    .channel-title-wrapper {
      flex-grow: 1;
    }

    .channel-stats {
      font-size: 0.9rem;
      color: var(--text-secondary);
      margin-top: 0.25rem;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem 1rem;
      width: 100%;
    }

    h1 {
      font-size: 1.8rem;
      font-weight: 700;
      margin: 0;
    }

    .channel-description {
      margin: 1.5rem 0;
      padding: 1rem;
      background-color: var(--card-bg);
      border-radius: 8px;
      font-size: 0.95rem;
      line-height: 1.6;
    }

    .loading {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 3rem;
      font-size: 1.2rem;
    }

    .loading-spinner {
      border: 4px solid rgba(255, 255, 255, 0.1);
      border-left-color: var(--accent);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin-right: 15px;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .video-card {
      background-color: var(--card-bg);
      border-radius: 12px;
      overflow: hidden;
      box-shadow: var(--card-shadow);
      transition: var(--transition);
      height: 100%;
      display: flex;
      flex-direction: column;
    }

    .video-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
    }

    .thumbnail-container {
      position: relative;
      padding-top: 56.25%; /* 16:9 aspect ratio */
      overflow: hidden;
    }

    .thumbnail {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: var(--transition);
    }

    .video-card:hover .thumbnail {
      transform: scale(1.05);
    }

    .video-duration {
      position: absolute;
      bottom: 8px;
      right: 8px;
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 3px 6px;
      border-radius: 4px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .play-button {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: var(--transition);
      cursor: pointer;
    }

    .video-card:hover .play-button {
      opacity: 1;
    }

    .video-info {
      padding: 1rem;
      display: flex;
      flex-direction: column;
      flex-grow: 1;
    }

    .video-title {
      font-size: 1rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      color: var(--text-primary);
      text-decoration: none;
    }

    .video-description {
      font-size: 0.85rem;
      color: var(--text-secondary);
      margin-bottom: 0.75rem;
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .video-meta {
      display: flex;
      align-items: center;
      justify-content: space-between;
      color: var(--text-secondary);
      font-size: 0.8rem;
      margin-top: auto;
    }

    .video-stats {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .stat {
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .video-date {
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.9);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }

    .modal.active {
      opacity: 1;
      pointer-events: all;
    }

    .modal-content {
      width: 90%;
      max-width: 900px;
      position: relative;
    }

    .close-modal {
      position: absolute;
      top: -40px;
      right: 0;
      font-size: 1.5rem;
      color: white;
      background: none;
      border: none;
      cursor: pointer;
    }

    .video-frame {
      width: 100%;
      aspect-ratio: 16/9;
      border: none;
    }

    .error-message {
      background-color: rgba(255, 0, 0, 0.2);
      color: #ff6b6b;
      padding: 1rem;
      border-radius: 8px;
      text-align: center;
      margin: 2rem auto;
      max-width: 600px;
    }

    .load-more-container {
      display: flex;
      justify-content: center;
      margin-top: 2rem;
    }

    .load-more-btn {
      background-color: var(--accent);
      color: white;
      border: none;
      padding: 0.8rem 1.5rem;
      border-radius: 30px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .load-more-btn:hover {
      background-color: #cc0000;
      transform: translateY(-2px);
    }

    .load-more-btn.loading {
      background-color: #888;
      cursor: default;
      padding: 0.8rem 1.5rem;
    }

    .load-more-btn .spinner {
      width: 18px;
      height: 18px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
    }

    .category-filter {
      margin: 1rem 0 2rem;
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .category-btn {
      background-color: var(--card-bg);
      color: var(--text-secondary);
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: var(--transition);
    }

    .category-btn.active {
      background-color: var(--accent);
      color: white;
    }

    .category-btn:hover:not(.active) {
      background-color: #333;
      color: white;
    }

    .structured-data {
      display: none;
    }

    footer {
      background-color: rgba(0, 0, 0, 0.8);
      padding: 1.5rem;
      text-align: center;
      margin-top: auto;
      margin-bottom: 0;
    }

    footer a {
      color: var(--text-primary);
      text-decoration: none;
      font-weight: bold;
      transition: var(--transition);
    }

    footer a:hover {
      color: var(--accent);
    }

    #credit-warning {
      color: #ff6b6b;
      margin-top: 0.5rem;
      display: none;
    }

    @media (max-width: 768px) {
      .video-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1rem;
      }
      
      h1 {
        font-size: 1.5rem;
      }

      .category-filter {
        justify-content: center;
      }
    }

    @media (max-width: 480px) {
      .video-grid {
        grid-template-columns: 1fr;
      }
      
      .channel-info {
        flex-direction: column;
        text-align: center;
      }
      
      h1 {
        font-size: 1.3rem;
        margin-top: 0.5rem;
      }

      .loading-spinner {
        width: 30px;
        height: 30px;
      }

      .video-meta {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }
    }

    /* Animation for lazy loading */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
   </style>
   <b:skin>
    <![CDATA[
      -------------------------------------------------------------------------
      YTRanker YouTube Channel Responsive Gallery Template
      -------------------------------------------------------------------------
      Name           : YTRanker
      Author         : saheermk
      Author  URL    : https://saheermk.blogspot.com/
      Date           : May, 2025
      Version        : 1.1
      Source Code    : https://github.com/saheermk/YTRanker
      -------------------------------------------------------------------------
      License        : 
      - You are free to use the source code as-is without modification.
      - If you use the code without modification, you must retain this credit.
      - If you modify the code, retaining this credit is not necessary.
      -------------------------------------------------------------------------
      -------------------------------------------------------------------------
    ]]>
    </b:skin>
</head>

<body>
  <!-- Blogger Header Section -->
  <b:section class='header' id='header' maxwidgets='1' showaddelement='no'>
    <b:widget id='Header1' locked='true' title='YTRanker (Header)' type='Header'>
      <b:includable id='main' var='top'>
        <header>
          <div class="channel-info">
            <img id="channel-logo" class="channel-logo" src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50' width='50' height='50'%3E%3Ccircle cx='25' cy='25' r='25' fill='%23333'/%3E%3C/svg%3E" alt="Channel Logo"/>
            <div class="channel-title-wrapper">
              <h1 id="channel-name">Loading Channel...</h1>
              <div id="channel-stats" class="channel-stats"></div>
            </div>
          </div>
        </header>
      </b:includable>
    </b:widget>
  </b:section>

  <!-- Main Content Section -->
  <b:section class='main' id='main' showaddelement='yes'>
    <b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog'>
      <b:includable id='main' var='top'>
        <div class="container">
          <div id="channel-description" class="channel-description">
            <b:if cond='data:blog.aboutMe'>
              <data:blog.aboutMe/>
            </b:if>
          </div>
          
          <div id="category-filter" class="category-filter">
            <!-- Categories will be added here dynamically -->
          </div>

          <div id="loading" class="loading">
            <div class="loading-spinner"></div>
            <span>Loading videos...</span>
          </div>

          <div id="error-container"></div>
          <div id="video-gallery" class="video-grid"></div>
          
          <div id="load-more-container" class="load-more-container" style="display: none;">
            <button id="load-more-btn" class="load-more-btn">
              <span>Load More Videos</span>
            </button>
          </div>
        </div>

        <!-- Only include blog posts if viewing a specific post -->
        <b:if cond='data:blog.pageType == "item"'>
          <div class='blog-posts hfeed'>
            <b:include data='top' name='status-message'/>
            <data:defaultAdStart/>
            <b:loop values='data:posts' var='post'>
              <b:include data='post' name='post'/>
            </b:loop>
            <data:defaultAdEnd/>
          </div>
        </b:if>
      </b:includable>
    </b:widget>
  </b:section>

  <div id="video-modal" class="modal">
    <div class="modal-content">
      <button id="close-modal" class="close-modal">
        <i class="fas fa-times"></i>
      </button>
      <iframe id="video-frame" class="video-frame" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="true"></iframe>
    </div>
  </div>

  <!-- Structured data for SEO -->
  <script type="application/ld+json" id="channel-structured-data" class="structured-data"></script>

<!-- Footer Section -->
    <b:section class='footer' id='footer' showaddelement='no'>
      <b:widget id='HTML1' locked='true' title='Footer' type='HTML'>
        <b:includable id='main' var='top'>
          <footer>
            <p>
              <b:if cond='data:blog.homepageUrl == data:blog.url'>
              <b:else/>
                <a expr:href='data:blog.homepageUrl'></a>
              </b:if>
              Developed by <a href="https://saheermk.blogspot.com/" target="_blank" id="credit-link">SaheerMK</a>
            </p>
            <p id="credit-warning">⚠️ Credit was removed or altered! Page functionality disabled.</p>
          </footer>
        </b:includable>
      </b:widget>
    </b:section>



  <!-- YouTube API Script -->
  <b:if cond='data:blog.pageType != "error_page"'>
    <script>
    //<![CDATA[

    // Configuration
    const apiKey = 'YOUR_API_KEY';  // Replace with your actual API key
    const channelId = 'YOUR_CHANNEL_ID_NUMBER';  // Replace with your YouTube channel ID
    const maxResults = 24;  // Number of videos to fetch per page
    const siteUrl = window.location.href;  // For canonical URL

    // Store video data
    let allVideos = [];
    let filteredVideos = [];
    let nextPageToken = '';
    let isLoading = false;
    let videoCategories = new Set(['All']);
    let currentCategory = 'All';
    let channelData = null;

    // DOM Elements
    const gallery = document.getElementById('video-gallery');
    const loading = document.getElementById('loading');
    const errorContainer = document.getElementById('error-container');
    const channelNameElement = document.getElementById('channel-name');
    const channelLogoElement = document.getElementById('channel-logo');
    const channelStatsElement = document.getElementById('channel-stats');
    const channelDescriptionElement = document.getElementById('channel-description');
    const categoryFilterElement = document.getElementById('category-filter');
    const loadMoreContainer = document.getElementById('load-more-container');
    const loadMoreBtn = document.getElementById('load-more-btn');
    const creditLink = document.getElementById('credit-link');
    const creditWarning = document.getElementById('credit-warning');
    const videoModal = document.getElementById('video-modal');
    const videoFrame = document.getElementById('video-frame');
    const closeModal = document.getElementById('close-modal');
    const channelStructuredData = document.getElementById('channel-structured-data');

    // SEO Elements
    const pageTitle = document.getElementById('page-title');
    const metaDescription = document.getElementById('meta-description');
    const metaKeywords = document.getElementById('meta-keywords');
    const ogTitle = document.getElementById('og-title');
    const ogDescription = document.getElementById('og-description');
    const ogImage = document.getElementById('og-image');
    const canonicalLink = document.getElementById('canonical-link');

    // Credit verification
    function verifyCreditLink() {
      const expectedHref = 'https://saheermk.blogspot.com/';
      const expectedText = 'SaheerMK';
      
      if (creditLink.href !== expectedHref || creditLink.textContent.trim() !== expectedText) {
        creditWarning.style.display = 'block';
        showError('credit-modified');
        document.querySelector('.container').innerHTML = errorContainer.innerHTML;
        return false;
      }

      return true;
    }

    // Format video duration from ISO 8601 format
    function formatDuration(isoDuration) {
      if (!isoDuration) return '';
      
      const match = isoDuration.match(/PT(\d+H)?(\d+M)?(\d+S)?/);
      
      const hours = (match[1]) ? parseInt(match[1].slice(0, -1)) : 0;
      const minutes = (match[2]) ? parseInt(match[2].slice(0, -1)) : 0;
      const seconds = (match[3]) ? parseInt(match[3].slice(0, -1)) : 0;
      
      if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      } else {
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
      }
    }

    // Format view count
    function formatViewCount(viewCount) {
      if (!viewCount) return '0 views';
      
      const count = parseInt(viewCount);
      if (count >= 1000000) {
        return `${(count / 1000000).toFixed(1)}M views`;
      } else if (count >= 1000) {
        return `${(count / 1000).toFixed(1)}K views`;
      } else {
        return `${count} views`;
      }
    }

    // Format date
    function formatDate(isoString) {
      const date = new Date(isoString);
      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays < 7) {
        if (diffDays === 0) {
          return 'Today';
        } else if (diffDays === 1) {
          return 'Yesterday';
        } else {
          return `${diffDays} days ago`;
        }
      } else if (diffDays < 30) {
        const weeks = Math.floor(diffDays / 7);
        return `${weeks} ${weeks === 1 ? 'week' : 'weeks'} ago`;
      } else if (diffDays < 365) {
        const months = Math.floor(diffDays / 30);
        return `${months} ${months === 1 ? 'month' : 'months'} ago`;
      } else {
        const years = Math.floor(diffDays / 365);
        return `${years} ${years === 1 ? 'year' : 'years'} ago`;
      }
    }

    // Show error message
    // Show user-friendly error message by key
function showError(messageKey) {
  loading.style.display = 'none';

  const messages = {
    'credit-modified': 'This page isn’t working properly because required credits have been changed. Please restore the credit link to continue.',
    'channel-not-found': 'We couldn’t load the channel details. Please check your internet connection or try again later.',
    'no-videos': 'There are currently no videos available on this channel. Please check back later.',
    'video-fetch-failed': 'We had trouble retrieving video information. Please refresh the page or try again shortly.',
    'init-failed': 'Something went wrong while setting up the gallery. Please try again later.',
    'category-empty': 'We couldn’t find any videos in this category. Try selecting a different one.',
    'default': 'An unexpected error occurred. Please try again later.'
  };

  const message = messages[messageKey] || messages['default'];

  errorContainer.innerHTML = `
    <div class="error-message">
      <i class="fas fa-exclamation-triangle"></i>
      ${message}
    </div>
  `;
}


    // Open video modal
    function openVideoModal(videoId) {
      videoFrame.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
      videoModal.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    // Close video modal
    function closeVideoModal() {
      videoModal.classList.remove('active');
      videoFrame.src = '';
      document.body.style.overflow = '';
    }

    // Update SEO meta tags
    function updateSEOTags(channel) {
      if (!channel) return;
      
      const title = `${channel.title} | Video Gallery - YTRanker`;
      const description = channel.description 
        ? `${channel.description.substring(0, 150)}...` 
        : `Explore the latest videos from ${channel.title} in an elegant gallery format.`;
      const keywords = `${channel.title}, youtube channel, video gallery , YTRanger, ${channel.keywords || ''}`;
      
      // Update document title and meta tags
      document.title = title;
      pageTitle.textContent = title;
      metaDescription.content = description;
      metaKeywords.content = keywords;
      
      // Update Open Graph tags
      ogTitle.content = title;
      ogDescription.content = description;
      ogImage.content = channel.thumbnailUrl || '';
      
      // Update canonical link
      canonicalLink.href = siteUrl;
      
      // Create structured data for the channel
      const structuredData = {
        "@context": "https://schema.org",
        "@type": "ItemList",
        "name": `${channel.title} Videos`,
        "description": description,
        "url": siteUrl,
        "itemListElement": []
      };
      
      // Add video items to structured data
      allVideos.forEach((video, index) => {
        structuredData.itemListElement.push({
          "@type": "ListItem",
          "position": index + 1,
          "item": {
            "@type": "VideoObject",
            "name": video.title,
            "description": video.description,
            "thumbnailUrl": video.thumbnail,
            "uploadDate": video.publishedAt,
            "contentUrl": `https://www.youtube.com/watch?v=${video.id}`,
            "embedUrl": `https://www.youtube.com/embed/${video.id}`
          }
        });
      });
      
      // Update structured data script
      channelStructuredData.textContent = JSON.stringify(structuredData);
    }

    // Lazy loading for thumbnails
    function lazyLoadImages() {
      const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
      };

      const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.src = img.dataset.src;
            img.classList.add('fade-in');
            observer.unobserve(img);
          }
        });
      }, options);

      document.querySelectorAll('.thumbnail[data-src]').forEach(img => {
        observer.observe(img);
      });
    }

    // Filter videos by category
    function filterVideosByCategory(category) {
      currentCategory = category;
      
      // Update active button state
      document.querySelectorAll('.category-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.textContent === category) {
          btn.classList.add('active');
        }
      });
      
      // Filter videos
      if (category === 'All') {
        filteredVideos = [...allVideos];
      } else {
        filteredVideos = allVideos.filter(video => {
          return video.tags && video.tags.includes(category);
        });
      }
      
      // Re-render gallery
      renderGallery();
    }

    // Create category filter buttons
    function createCategoryFilter() {
      if (videoCategories.size <= 1) return;
      
      categoryFilterElement.innerHTML = '';
      
      videoCategories.forEach(category => {
        const button = document.createElement('button');
        button.className = 'category-btn';
        button.textContent = category;
        if (category === currentCategory) {
          button.classList.add('active');
        }
        
        button.addEventListener('click', () => {
          filterVideosByCategory(category);
        });
        
        categoryFilterElement.appendChild(button);
      });
    }

    // Create video cards and add to gallery
    function renderGallery() {
      gallery.innerHTML = '';

      if (filteredVideos.length === 0) {
        showError('category-empty');
        return;
      }

      
      filteredVideos.forEach((video, index) => {
        const videoCard = document.createElement('div');
        videoCard.className = 'video-card';
        videoCard.style.animationDelay = `${index * 50}ms`;
        
        videoCard.innerHTML = `
          <div class="thumbnail-container">
            <img 
              class="thumbnail" 
              data-src="${video.thumbnail}" 
              src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 9' width='320' height='180'%3E%3Crect width='16' height='9' fill='%23333'/%3E%3C/svg%3E" 
              alt="${video.title}" 
              loading="lazy"
            />
            ${video.duration ? `<span class="video-duration">${video.duration}</span>` : ''}
            <div class="play-button">
              <i class="fas fa-play fa-2x"></i>
            </div>
          </div>
          <div class="video-info">
            <a href="javascript:void(0)" class="video-title">${video.title}</a>
            ${video.description ? `<p class="video-description">${video.description}</p>` : ''}
            <div class="video-meta">
              <div class="video-stats">
                ${video.viewCount ? `
                  <span class="stat"><i class="fas fa-eye"></i> ${video.viewCount}</span>
                ` : ''}
                ${video.likeCount ? `
                  <span class="stat"><i class="fas fa-thumbs-up"></i> ${video.likeCount}</span>
                ` : ''}
              </div>
              <span class="video-date"><i class="fas fa-calendar-alt"></i> ${video.publishedDate}</span>
            </div>
          </div>
        `;
        
        videoCard.addEventListener('click', () => openVideoModal(video.id));
        gallery.appendChild(videoCard);
      });
      
      // Initialize lazy loading
      lazyLoadImages();
    }

    // Fetch channel info
    async function fetchChannelInfo() {
      try {
        const response = await fetch(`https://www.googleapis.com/youtube/v3/channels?part=snippet,statistics,brandingSettings&id=${channelId}&key=${apiKey}`);
        const data = await response.json();
        
        if (!data.items || data.items.length === 0) {
          showError('channel-not-found');
          return null;
        }

        
        const channel = data.items[0];
        const snippet = channel.snippet;
        const statistics = channel.statistics;
        const brandingSettings = channel.brandingSettings;
        
        // Update channel info
        channelNameElement.textContent = snippet.title;
        channelLogoElement.src = snippet.thumbnails.high.url;
        
        // Update channel stats
        const subscriberCount = parseInt(statistics.subscriberCount).toLocaleString();
        const videoCount = parseInt(statistics.videoCount).toLocaleString();
        channelStatsElement.textContent = `${subscriberCount} subscribers • ${videoCount} videos`;
        
        // Update channel description
        if (snippet.description) {
          channelDescriptionElement.textContent = snippet.description;
        } else if (brandingSettings && brandingSettings.channel && brandingSettings.channel.description) {
          channelDescriptionElement.textContent = brandingSettings.channel.description;
        } else {
          channelDescriptionElement.style.display = 'none';
        }
        
        // Store channel data for SEO
        channelData = {
          title: snippet.title,
          description: snippet.description || (brandingSettings && brandingSettings.channel && brandingSettings.channel.description) || '',
          thumbnailUrl: snippet.thumbnails.high.url,
          keywords: (brandingSettings && brandingSettings.channel && brandingSettings.channel.keywords) || ''
        };
        
        // Update page title
        document.title = `${snippet.title} | YouTube Gallery`;
        
        return channel;
      } catch (error) {
        console.error('Error fetching channel info:', error);
        showError(`Failed to load channel information`);
        return null;
      }
    }

    // Fetch videos with detailed info
    async function fetchVideos(pageToken = '') {
      if (isLoading) return;
      
      isLoading = true;
      
      if (!pageToken) {
        // Show loading on initial load
        loading.style.display = 'flex';
      } else {
        // Show loading state on load more button
        loadMoreBtn.innerHTML = `
          <div class="spinner"></div>
          <span>Loading...</span>
        `;
        loadMoreBtn.classList.add('loading');
      }

      try {
        // Fetch video list
        const searchUrl = `https://www.googleapis.com/youtube/v3/search?key=${apiKey}&channelId=${channelId}&part=snippet,id&order=date&maxResults=${maxResults}&type=video${pageToken ? `&pageToken=${pageToken}` : ''}`;
        const searchResponse = await fetch(searchUrl);
        const searchData = await searchResponse.json();
        
        if (!searchData.items || searchData.items.length === 0) {
          if (!pageToken) {
            showError('no-videos');
          } else {
            loadMoreContainer.style.display = 'none';
          }
          return;
        }

        
        // Get next page token for pagination
        nextPageToken = searchData.nextPageToken || '';
        
        // Extract video IDs to get detailed info
        const videoIds = searchData.items
          .filter(item => item.id.kind === 'youtube#video')
          .map(item => item.id.videoId);
        
        if (videoIds.length === 0) {
          if (!pageToken) {
            throw new Error('No videos found for this channel');
          } else {
            loadMoreContainer.style.display = 'none';
            return;
          }
        }
        
        // Fetch detailed video info
        const videoDetailsUrl = `https://www.googleapis.com/youtube/v3/videos?key=${apiKey}&id=${videoIds.join(',')}&part=snippet,contentDetails,statistics`;
        const videoDetailsResponse = await fetch(videoDetailsUrl);
        const videoDetailsData = await videoDetailsResponse.json();
        
        if (!videoDetailsData.items || videoDetailsData.items.length === 0) {
          throw new Error('Could not fetch video details');
        }
        
        // Process video data
        const newVideos = videoDetailsData.items.map(item => {
          const snippet = item.snippet;
          const contentDetails = item.contentDetails;
          const statistics = item.statistics;
          
          // Extract tags for filtering
          if (snippet.tags && snippet.tags.length > 0) {
            snippet.tags.forEach(tag => {
              if (tag.length > 2 && tag.length < 20) {
                videoCategories.add(tag);
              }
            });
          }
          
          return {
            id: item.id,
            title: snippet.title,
            description: snippet.description,
            thumbnail: snippet.thumbnails.high ? snippet.thumbnails.high.url : snippet.thumbnails.default.url,
            publishedAt: snippet.publishedAt,
            publishedDate: formatDate(snippet.publishedAt),
            duration: formatDuration(contentDetails.duration),
            viewCount: formatViewCount(statistics.viewCount),
            likeCount: statistics.likeCount ? `${parseInt(statistics.likeCount).toLocaleString()}` : null,
            tags: snippet.tags || []
          };
        });
        
        // Append new videos to the list
        allVideos = [...allVideos, ...newVideos];
        
        // Limit categories to a reasonable number
        if (videoCategories.size > 10) {
          const categoriesArray = Array.from(videoCategories);
          videoCategories = new Set(['All', ...categoriesArray.slice(0, 9)]);
        }
        
        // Create category filter buttons
        createCategoryFilter();
        
        // Filter videos based on current category
        filterVideosByCategory(currentCategory);
        
        // Update SEO tags
        updateSEOTags(channelData);
        
        // Show/hide load more button based on next page token
        loadMoreContainer.style.display = nextPageToken ? 'flex' : 'none';
        
        // Hide loading indicator
        loading.style.display = 'none';
        
        // Reset load more button state
        loadMoreBtn.innerHTML = '<span>Load More Videos</span>';
        loadMoreBtn.classList.remove('loading');
        
      } catch (error) {
        console.error('Error:', error);
        if (!pageToken) {
          // Show error only on initial load
          showError(error.message || 'Failed to load videos. Check API key or channel ID.');
        } else {
          // Reset load more button on error
          loadMoreBtn.innerHTML = '<span>Load More Videos</span>';
          loadMoreBtn.classList.remove('loading');
          
          // Show error toast
          const toast = document.createElement('div');
          toast.style.cssText = `
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(255, 0, 0, 0.2);
            color: #ff6b6b;
            padding: 10px 20px;
            border-radius: 4px;
            z-index: 1000;
          `;
          toast.textContent = 'Failed to load more videos. Please try again.';
          document.body.appendChild(toast);
          
          setTimeout(() => {
            document.body.removeChild(toast);
          }, 3000);
        }
      } finally {
        isLoading = false;
      }
    }

    // Initialize the gallery
    async function initGallery() {
      if (!verifyCreditLink()) return;
      
      try {
        // Fetch channel info
        const channel = await fetchChannelInfo();
        
        if (!channel) return;
        
        // Fetch initial videos
        await fetchVideos();
      } catch (error) {
        console.error('Initialization error:', error);
        showError('Failed to initialize the gallery. Please check your API key and channel ID.');
      }
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', initGallery);
    
    loadMoreBtn.addEventListener('click', () => {
      if (nextPageToken && !isLoading) {
        fetchVideos(nextPageToken);
      }
    });
    
    closeModal.addEventListener('click', closeVideoModal);
    
    videoModal.addEventListener('click', (e) => {
      if (e.target === videoModal) closeVideoModal();
    });

    // Handle escape key for modal
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && videoModal.classList.contains('active')) {
        closeVideoModal();
      }
    });

    // Enable infinite scroll loading
    const infiniteScrollObserver = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting && nextPageToken && !isLoading) {
        fetchVideos(nextPageToken);
      }
    }, { rootMargin: '200px' });
      // Add this CSS to make channel elements clickable (add to your existing CSS)
    const additionalCSS = `
      .channel-logo, .channel-title-wrapper {
        cursor: pointer;
        transition: var(--transition);
      }

      .channel-logo:hover {
        transform: scale(1.05);
        box-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
      }

      .channel-title-wrapper:hover h1 {
        color: var(--accent);
      }
    `;

    // Add the CSS to the page
    const style = document.createElement('style');
    style.textContent = additionalCSS;
    document.head.appendChild(style);

    // Function to redirect to YouTube channel
    function redirectToChannel() {
      const channelUrl = `https://www.youtube.com/channel/${channelId}`;
      window.open(channelUrl, '_blank');
    }

    // Add event listeners after DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      // Add click event to channel logo
      const channelLogo = document.getElementById('channel-logo');
      if (channelLogo) {
        channelLogo.addEventListener('click', redirectToChannel);
      }

      // Add click event to channel name wrapper
      const channelTitleWrapper = document.querySelector('.channel-title-wrapper');
      if (channelTitleWrapper) {
        channelTitleWrapper.addEventListener('click', redirectToChannel);
      }
	});


    // Observe the load more button for infinite scroll
    infiniteScrollObserver.observe(loadMoreContainer);
    //]]>
    </script>
  </b:if>
  <!-- End Please keep the Credits intact-->
</body>
</html>
